"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3221],{8809:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var i=t(4848),o=t(8453);const l={tags:["react","frontend","build","typescript","make","makefile"]},s="Minimal React Frontend",a={permalink:"/blog/2024/08/31/index",editUrl:"https://github.com/raiment-studios/monorepo/tree/main/projects/raiment-studios/web2/blog/2024-08-31/index.md",source:"@site/blog/2024-08-31/index.md",title:"Minimal React Frontend",description:"To accelerate being UI development and debugging of Snowscape, I'm building a web-based front-end that can connect to the engine. I'm familiar with React and TypeScript, so being able to use the browser development environment will speed things along (versus trying to learn egui or another Rust-based framework at this point in development).",date:"2024-08-31T00:00:00.000Z",tags:[{inline:!0,label:"react",permalink:"/blog/tags/react"},{inline:!0,label:"frontend",permalink:"/blog/tags/frontend"},{inline:!0,label:"build",permalink:"/blog/tags/build"},{inline:!0,label:"typescript",permalink:"/blog/tags/typescript"},{inline:!0,label:"make",permalink:"/blog/tags/make"},{inline:!0,label:"makefile",permalink:"/blog/tags/makefile"}],readingTime:4.45,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["react","frontend","build","typescript","make","makefile"]},unlisted:!1,nextItem:{title:"Render pipeline improvements",permalink:"/blog/2024/08/23/index"}},r={authorsImageUrls:[]},c=[{value:"The files",id:"the-files",level:3},{value:"The Makefile (Makefile)",id:"the-makefile-makefile",level:3},{value:"Tools &amp; dependencies (package.json)",id:"tools--dependencies-packagejson",level:3},{value:"open-browser.js",id:"open-browserjs",level:4},{value:"Files to keep out of git (.gitignore)",id:"files-to-keep-out-of-git-gitignore",level:3},{value:"Boilerplate minimal HTML (index.html)",id:"boilerplate-minimal-html-indexhtml",level:3},{value:"Boilerplate CSS (style.css)",id:"boilerplate-css-stylecss",level:3},{value:"React bootstrapping (main.tsx)",id:"react-bootstrapping-maintsx",level:3},{value:"The actual app (App.tsx)",id:"the-actual-app-apptsx",level:3},{value:"Where&#39;s all the other stuff?",id:"wheres-all-the-other-stuff",level:3}];function d(e){const n={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"To accelerate being UI development and debugging of Snowscape, I'm building a web-based front-end that can connect to the engine. I'm familiar with React and TypeScript, so being able to use the browser development environment will speed things along (versus trying to learn egui or another Rust-based framework at this point in development)."}),"\n",(0,i.jsx)(n.p,{children:'JavaScript tooling drives me a bit bonkers so here\'s a quick write-up on my "minimal" setup to get a front-end going (i.e. for simple, non-production purposes). Given the rate of change in the JavaScript ecosystem, who knows how long this post will be useful or relevant for!'}),"\n",(0,i.jsx)(n.h3,{id:"the-files",children:"The files"}),"\n",(0,i.jsx)(n.p,{children:'The "minimal" files needed here are:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"src/\n    app.tsx\n    main.tsx\n    index.html\n    style.css\nscripts/\n    open-browser.js\n\n.gitignore\npackage.json\nMakefile\n"})}),"\n",(0,i.jsx)(n.h3,{id:"the-makefile-makefile",children:"The Makefile (Makefile)"}),"\n",(0,i.jsxs)(n.p,{children:["I like Makefiles because I know ",(0,i.jsx)(n.code,{children:"make build"})," is going to build my project and I don't have to worry about whether the project is using ",(0,i.jsx)(n.code,{children:"npm"}),", ",(0,i.jsx)(n.code,{children:"npx"}),", ",(0,i.jsx)(n.code,{children:"tsc"}),", ",(0,i.jsx)(n.code,{children:"esbuild"}),", ",(0,i.jsx)(n.code,{children:"cargo"}),", etc. This is great for large complex monorepos using multiple languages as well as for coming back to old personal projects where I've long since forgotten all the details of how I build it."]}),"\n",(0,i.jsx)(n.p,{children:"I'm a big fan of language agnostic command-runners and Make, while hardly perfect, is ubiquitously available -- which is a good fit for a command runner you're using to avoid having to remmeber specialized tools."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Makefile",children:'PHONY: ensure build run dev\n\nensure:\n\tnpm i\n\nbuild: ensure\n\tmkdir -p dist/static\n\tcp src/index.html dist\n\tcp src/style.css dist\n\tnpx esbuild \\\n\t\t--preserve-symlinks \\\n\t\t--loader:.js=jsx \\\n\t\t--loader:.md=text \\\n\t\t--loader:.yaml=text \\\n\t\t--loader:.txt=text \\\n\t\t--sourcemap \\\n\t\t--bundle src/main.tsx \\\n\t\t--outfile=dist/main.bundle.js\n\nrun: build\n\t(sleep 2 && node scripts/open-browser.js) &\n\tnpx http-server -c-1 dist\n\ndev:\n\t$(MAKE) run &\n\tnpx nodemon \\\n\t\t--watch src \\\n\t\t--ext ts,tsx,html,css,yaml,yml \\\n\t\t--exec "make build || exit 1"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"tools--dependencies-packagejson",children:"Tools & dependencies (package.json)"}),"\n",(0,i.jsxs)(n.p,{children:["The above requires some tools, so let's look at the ",(0,i.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'{\n    "devDependencies": {\n        "@types/react": "^18.3.5",\n        "esbuild": "^0.23.1",\n        "http-server": "^14.1.1",\n        "nodemon": "^3.1.4",\n        "react-dev-utils": "^12.0.1"\n    },\n    "dependencies": {\n        "react": "^18.3.1",\n        "react-dom": "^18.3.1"\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"open-browserjs",children:"open-browser.js"}),"\n",(0,i.jsxs)(n.p,{children:["And we have one super simple script ",(0,i.jsx)(n.code,{children:"scripts/open-browswer.js"})," for opening a browswer tab when the client is launched. It's basically just a wrapper to call a function in an external package:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const openBrowser = require('react-dev-utils/openBrowser');\nopenBrowser('http://localhost:8080');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"files-to-keep-out-of-git-gitignore",children:"Files to keep out of git (.gitignore)"}),"\n",(0,i.jsxs)(n.p,{children:["And let's not forget about making a ",(0,i.jsx)(n.code,{children:".gitignore"})," so we don't accidentally commit built files to the repo that we don't want there:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/node_modules/\n/dist/\n"})}),"\n",(0,i.jsx)(n.h3,{id:"boilerplate-minimal-html-indexhtml",children:"Boilerplate minimal HTML (index.html)"}),"\n",(0,i.jsxs)(n.p,{children:["We need an ",(0,i.jsx)(n.code,{children:"index.html"})," to host the page:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <meta charset="utf-8" />\n        <meta http-equiv="cache-control" content="no-cache" />\n        <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>\n        <link href="style.css" rel="stylesheet" />\n        <title></title>\n    </head>\n    <body>\n        <div id="root"></div>\n        <script src="main.bundle.js" type="application/javascript"><\/script>\n    </body>\n</html>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"boilerplate-css-stylecss",children:"Boilerplate CSS (style.css)"}),"\n",(0,i.jsx)(n.p,{children:"I generally use inline CSS for small projects, but it's nice to have a single CSS for global settings, normalization, etc."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"body {\n    margin: 0;\n    padding: 0;\n\n    font-family: monospace;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"react-bootstrapping-maintsx",children:"React bootstrapping (main.tsx)"}),"\n",(0,i.jsxs)(n.p,{children:["I like the convention of having a ",(0,i.jsx)(n.code,{children:"main()"})," function that calls a ",(0,i.jsx)(n.code,{children:"Main"}),' component and, between those two, all the foundational "plumbing" of a React app is handled. In particular, for a simple development/debugging client like it adds very basic, minimal "hot reloading" that polls for changes to the underlying script bundle (no complicated dev servers: just a simple polling loop with a handful of lines of code).']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React, { JSX } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { App } from './app';\n\nfunction Main(): JSX.Element {\n    return <App />;\n}\n\nasync function main() {\n    console.log('--- snowscape client main ----');\n    pollForReload('/main.bundle.js');\n    pollForReload('/style.css');\n\n    const element = document.getElementById('root')!;\n    const root = ReactDOM.createRoot(element);\n    root.render(<Main />);\n}\n\nmain();\n\nfunction pollForReload(url) {\n    let previous: string | null = null;\n    const poll = async () => {\n        const resp = await fetch(url);\n        const text = await resp.text();\n        if (previous === null) {\n            previous = text;\n        } else if (previous !== text) {\n            window.location.reload();\n        }\n        setTimeout(poll, 800 + Math.random() * 800);\n    };\n    setTimeout(poll, 250);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"the-actual-app-apptsx",children:"The actual app (App.tsx)"}),"\n",(0,i.jsx)(n.p,{children:"The plumbing out of the way, we now have a place to start developing the app in a file that free of the any of the bootstrapping logic:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React, { JSX } from 'react';\n\nexport function App(): JSX.Element {\n    return (\n        <div>\n            <h1>Hello App</h1>\n        </div>\n    );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"wheres-all-the-other-stuff",children:"Where's all the other stuff?"}),"\n",(0,i.jsxs)(n.p,{children:["What about ",(0,i.jsx)(n.code,{children:"eslint"}),", hot reloading dev server that can load individual components, tailwind CSS integration, API generation, deployment scripts, etc. etc.?"]}),"\n",(0,i.jsx)(n.p,{children:'I\'m very wary of the "not built here" syndrome that leads to developers (including myself) building things themselves that have already been built by others in high-quality fashion. However, over the years, too many times JavaScript build systems have "locked" my projects into a certain way of developing that (1) makes upgrades to new libraries hard, (2) doesn\'t work with other libraries / tools, (3) breaks mysteriously after not being used for 6+ months, (4) etc. As such, I tend to try to keep JavaScript build systems pretty minimal and "unabstracted" so it\'s easier to debug when there\'s a build issue. That said, the above is "good enough" for most of the simple one-off apps I experiment with but certainly not the best and probably not what is desirable for a full, production web app being developed by a team!'})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const o={},l=i.createContext(o);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);