"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/08/12/index","metadata":{"permalink":"/blog/2024/08/12/index","editUrl":"https://github.com/raiment-studios/monorepo/tree/main/projects/raiment-studios/web2/blog/2024-08-12/index.md","source":"@site/blog/2024-08-12/index.md","title":"WGPU progress","description":"Progress update: have some vertices making it from disk to the screen. That\'s a cube sitting behind of a \\"2D\\" pentagon (not necessarily obvious without lights or shading yet).","date":"2024-08-12T00:00:00.000Z","tags":[],"readingTime":0.39,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"nextItem":{"title":"Worth reading","permalink":"/blog/2024/08/11/index"}},"content":"Progress update: have some vertices making it from disk to the screen. That\'s a cube sitting behind of a \\"2D\\" pentagon (not necessarily obvious without lights or shading yet).\\n\\nThe general task I\'ve been working on is taking the \\"catch-all\\" `State` object from the [Learn Wgpu tutorial](https://sotrh.github.io/learn-wgpu/) and refactoring into a rendering architecture. This requires wrangling with lifetimes and data sharing, both in my learning how Rust works as well as how objects work in wgpu.\\n\\n![alt text](image-1.png)"},{"id":"/2024/08/11/index","metadata":{"permalink":"/blog/2024/08/11/index","editUrl":"https://github.com/raiment-studios/monorepo/tree/main/projects/raiment-studios/web2/blog/2024-08-11/index.md","source":"@site/blog/2024-08-11/index.md","title":"Worth reading","description":"-   Arc and Mutex in Rust - useful examples and explanation about thes Rust types","date":"2024-08-11T00:00:00.000Z","tags":[],"readingTime":0.125,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"WGPU progress","permalink":"/blog/2024/08/12/index"},"nextItem":{"title":"Following the wgpu tutorial","permalink":"/blog/2024/08/10/index"}},"content":"-   [Arc and Mutex in Rust](https://itsallaboutthebit.com/arc-mutex/) - useful examples and explanation about thes Rust types\\n-   [Reddit thread about wgpu buffers](https://www.reddit.com/r/rust/comments/141ll5b/wgpu_questions_vertex_buffers/)\\n-   [WebGPU Buffer Uploads](https://toji.dev/webgpu-best-practices/buffer-uploads.html)"},{"id":"/2024/08/10/index","metadata":{"permalink":"/blog/2024/08/10/index","editUrl":"https://github.com/raiment-studios/monorepo/tree/main/projects/raiment-studios/web2/blog/2024-08-10/index.md","source":"@site/blog/2024-08-10/index.md","title":"Following the wgpu tutorial","description":"Ramping up on the custom rendering engine by going through the excellent Learn Wgpu tutorial.  There\'s not much to say that\'s insightful here, but I find it\'s nice to create \\"early days\\" blog posts and images to highlight progress over time.","date":"2024-08-10T00:00:00.000Z","tags":[],"readingTime":1.205,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Worth reading","permalink":"/blog/2024/08/11/index"}},"content":"Ramping up on the custom rendering engine by going through the excellent [Learn Wgpu tutorial](https://sotrh.github.io/learn-wgpu/).  There\'s not much to say that\'s insightful here, but I find it\'s nice to create \\"early days\\" blog posts and images to highlight progress over time.\\n\\n![alt text](image-1.png)\\n\\n####  I read a comment along the lines of \\"wgpu has so much boilerplate\\"\\n\\nThough pedantic, I\'d argue wgpu has a lot of _configuration_. I tend to consider boilerplate code common text that _must be_ repeated to properly structure or specify another piece of _non-common_ configuration or otherwise unique code. (Note: my personal definition is _very_ different from [AWS\' definition](https://aws.amazon.com/what-is/boilerplate-code/) which portrays \\"boilerplate\\" as a positive).  By \\"must be repeated\\", I\'m alluding to the kind of code that cannot be encapsulated easily into a reusable function, library, or other standard language primitive -- let\'s ignore macros certainly blur that line and just run with this hand-wavy definition!\\n\\nIn the context of creating _many different wgpu programs_, I can see how repeating the exact same configuration would constitue a good deal of \\"boilerplate code.\\" However, that commonality could be easily wrapped into a reusable library, which -- if we\'re willing to run with my definition of boilerplate code! -- means it is not boilerplate code as the code does not have the quality that it \\"must be\\" repeated.\\n\\nIn the context of a single program, wgpu strikes me simply as a very low-level library with detailed, highly structured configuration."}]}}')}}]);