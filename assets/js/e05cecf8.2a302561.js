"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5226],{9097:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=s(4848),t=s(8453);const r={tags:["scene","descriptors","modules","distributions"]},o="Scene loading",a={id:"snowfall/architecture/scene-loading",title:"Scene loading",description:"Distributions",source:"@site/docs/snowfall/400-architecture/420-scene-loading.mdx",sourceDirName:"snowfall/400-architecture",slug:"/snowfall/architecture/scene-loading",permalink:"/docs/snowfall/architecture/scene-loading",draft:!1,unlisted:!1,editUrl:"https://github.com/raiment-studios/monorepo/tree/main/projects/raiment-studios/web2/docs/snowfall/400-architecture/420-scene-loading.mdx",tags:[{inline:!0,label:"scene",permalink:"/docs/tags/scene"},{inline:!0,label:"descriptors",permalink:"/docs/tags/descriptors"},{inline:!0,label:"modules",permalink:"/docs/tags/modules"},{inline:!0,label:"distributions",permalink:"/docs/tags/distributions"}],version:"current",sidebarPosition:420,frontMatter:{tags:["scene","descriptors","modules","distributions"]},sidebar:"snowfallSidebar",previous:{title:"Concepts",permalink:"/docs/snowfall/architecture/concepts"},next:{title:"Collision detection",permalink:"/docs/snowfall/architecture/collisions"}},d={},l=[{value:"Distributions",id:"distributions",level:2},{value:"Modules",id:"modules",level:2},{value:"Design &amp; implementation",id:"design--implementation",level:2},{value:"Principles of the design",id:"principles-of-the-design",level:3},{value:"How it works",id:"how-it-works",level:3},{value:"Disk format",id:"disk-format",level:4},{value:"Descriptor",id:"descriptor",level:4},{value:"Normalized Scene",id:"normalized-scene",level:4},{value:"Rendering structs",id:"rendering-structs",level:4}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"scene-loading",children:"Scene loading"})}),"\n",(0,i.jsx)(n.h2,{id:"distributions",children:"Distributions"}),"\n",(0,i.jsxs)(n.p,{children:["Scenes are loaded from what's called a ",(0,i.jsx)(n.strong,{children:"distribution"}),". This name is used as the engine intends to operate on a set of plugins, assets, and resources that are distributed together as group. These may evolve or fork."]}),"\n",(0,i.jsx)(n.h2,{id:"modules",children:"Modules"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"module"})," is likewise a set of resources for the game that is distributed together. Resources can be assets, plugins, or even other modules. A distribution is in fact a special-case of a module that is intended to be a top-level module that has all the necessary resources to run a game, whereas a general module may only have a partial set of resources (e.g. only art, music, a specific actor plugin, etc.)."]}),"\n",(0,i.jsx)(n.h2,{id:"design--implementation",children:"Design & implementation"}),"\n",(0,i.jsx)(n.h3,{id:"principles-of-the-design",children:"Principles of the design"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"User-friendly, including for new contributors and non-engineers"}),"\n",(0,i.jsx)(n.li,{children:"Editor-friendly, favoring standard formats"}),"\n",(0,i.jsx)(n.li,{children:"Performance only after the above principles are satisfied"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"how-it-works",children:"How it works"}),"\n",(0,i.jsx)(n.mermaid,{value:"graph LR\n    subgraph Loading\n        A[Disk Format] --\x3e B[Descriptor Format]\n    end\n    subgraph Engine\n        subgraph Render Loop\n            direction BT\n            D[Rendering Loop]\n            E[Rendering structs]\n\n        end\n\n        C[Normalized Scene] --\x3e D\n    end\n    B --\x3e C"}),"\n",(0,i.jsx)(n.p,{children:"There are three key layers:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The on disk format"}),"\n",(0,i.jsx)(n.li,{children:'An intermediate in-memory represenation of the disk format ("descriptors")'}),"\n",(0,i.jsx)(n.li,{children:"A normalized format that is used by the running engine"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"disk-format",children:"Disk format"}),"\n",(0,i.jsx)(n.p,{children:"Not much to say about this! This is just the files on disk."}),"\n",(0,i.jsx)(n.h4,{id:"descriptor",children:"Descriptor"}),"\n",(0,i.jsx)(n.p,{children:"The purpose of the Descriptor layer is most easily explained when considering YAML files."}),"\n",(0,i.jsx)(n.p,{children:"These should be in flexible, user-friendly, non-normalized structures. The descriptor defines this YAML schema and lets the deserializer know how to read the file. The engine does not use these directly as what's most user-friendly is not going to be 1:1 with what's the right data structure for the engine to process every frame."}),"\n",(0,i.jsxs)(n.p,{children:["For other formats, say MagicaVoxel files, the descriptor is the struct produced by the loading library such as ",(0,i.jsx)(n.code,{children:"vox_format::VoxModel"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"normalized-scene",children:"Normalized Scene"}),"\n",(0,i.jsxs)(n.p,{children:["The next step (called ",(0,i.jsx)(n.code,{children:"build"})," in the code currently) converst the descriptors into a normalized format that is used by the engine directly. What this means is, for example, all voxel models -- whether they came from a VOX file, a GOX file, or were generated by a script -- are stored in the same structure. The core engine is decoupled from the specific sources and formats, which makes the code easier to maintain and extend."]}),"\n",(0,i.jsx)(n.h4,{id:"rendering-structs",children:"Rendering structs"}),"\n",(0,i.jsxs)(n.p,{children:["While we won't go into full detail here, the normalized scene ",(0,i.jsx)(n.em,{children:"does not"})," contain any renderer-specific data like WGPU structures. That data is adorned as a shadow structure during the rendering to keep the layers separate. Thus disk format, normalized scene, and rendering specifics stay decoupled."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);